{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OSDF Documentation","text":"<p>This website contains guides for interacting with a namespace in the OSDF.</p> Are you an OSPool user? <p>If you are an OSPool user, you already have access to an OSDF origin on your OSPool Access Point. To learn how to use this origin on the OSPool, see the OSPool guide.</p> <p>If you are trying to run jobs on the OSPool that access a namespace, please contact support@osg-htc.org for assistance.</p>"},{"location":"#download-data-from-a-namespace","title":"Download data from a namespace","text":"<p>If you are trying to download data from a namespace, you should start by learning how to</p> <ol> <li>Install and use the Pelican client Guide </li> <li>Download data via the OSDF. Guide </li> <li>Sync your dataset for sharing via the OSDF. Guide </li> </ol>"},{"location":"#contribute-data-to-a-namespace","title":"Contribute data to a namespace","text":"<p>If you are trying to upload data to a namespace, you should start by learning how to</p> <ol> <li>Install and use the Pelican client, the software powering the OSDF. Guide </li> <li>Upload data via the OSDF. Guide </li> <li>Sync your dataset for sharing via the OSDF. Guide </li> </ol>"},{"location":"#manage-a-namespace","title":"Manage a namespace","text":"<p>If you are managing a namespace, you should start by learning how to</p> <ol> <li>Give access to your collaborators. Guide </li> </ol>"},{"location":"collaborators/","title":"Manage collaborator access","text":"<p>Abstract</p> <p>The OSDF currently uses COmanage  for managing access to authenticated namespaces.</p> <p>In this guide, you'll learn</p> <ul> <li>how to login to the COmanage registry</li> <li>how to find the groups that grant access to your namespace</li> <li>how to give collaborators access to your namespace</li> </ul> <p>This guide is intended for users who manage a namespace in the OSDF, usually set up in coordination with the OSDF team. If you were not directed to this page by a member of the OSDF team, the following instructions likely do not apply to you.</p> <p>For assistance, consider emailing the OSDF team at support@osg-htc.org.</p>"},{"location":"collaborators/#login-to-comanage","title":"Login to COmanage","text":"<p>This section covers how to login to COmanage. These instructions assume that you have registered your identity with COmanage previously, which should be the case if you are the manager of a namespace.</p> <ol> <li> <p>Go to registry.cilogon.org.</p> <p></p> </li> <li> <p>Click on the \"LOGIN\" button.</p> </li> <li> <p>On the CILogon page, select the appropriate identity provider and click \"Log On\".     Typically, this is the same identity provider you used when you first registered in COmanage.</p> <p>Tip</p> <p>We recommend that you do not click the \"Remember this selection\" box until after you've done several successful authentications. It can be tricky to \"undo\" this box, so it is best to make sure everything is working first!</p> <p></p> </li> <li> <p>Sign in to your selected identity provider as you normally would.     You may be automatically logged in, depending on your browser settings.</p> </li> </ol> <p>You should see the following page once you've successfully logged in:</p> <p></p>"},{"location":"collaborators/#comanage-groups-that-you-manage","title":"COmanage groups that you manage","text":"<p>To see the COmanage groups that you manage:</p> <ol> <li>Open the left-side navigation menu.</li> <li>Click on the \"Groups\" dropdown.</li> <li>Click on the \"My Groups\" link in the dropdown.</li> <li>In the filter bar at the top of the group list, remove the filter \"Groups I'm a member of\" by clicking on it.</li> </ol> <p>Alternatively, use this link to get to the same page. You should see something like this:</p> <p></p> <p>There are up to two groups (per namespace) that you can manage:</p> <ul> <li><code>osstore-NAMESPACE-read</code></li> <li><code>osstore-NAMESPACE-rw</code></li> </ul> <p>Membership of these groups in COmanage controls the corresponding permissions that an identity has for interacting with the namespace via the OSDF and Pelican:</p> <ul> <li>Members of the <code>-read</code> group can download objects in the <code>osdf:///YOUR_NAMESPACE/</code> address, but cannot write/upload.</li> <li>Members of the <code>-rw</code> group can both download and upload objects in the <code>osdf:///YOUR_NAMESPACE/</code> address.</li> </ul> <p>Note</p> <p>If your namespace has public reads enabled, there is not a group for controlling who can download objects from the <code>osdf:///YOUR_NAMESPACE/public</code> address, because anyone can download objects from that address! So you will only see one group listed instead of two. </p> <p>You can see the members of a group by clicking on the \"Members\" icon for that group's row. This will take you to a page like the following:</p> <p></p> <p>On this page, you can see the current list of members of the group and their permissions within the group.</p> <ul> <li>A \"member\" of the group can interact with the namespace as described above.</li> <li>An \"owner\" of the group can manage the membership of the group and their permissions within COmanage.</li> </ul>"},{"location":"collaborators/#find-collaborators-in-comanage","title":"Find collaborators in COmanage","text":"<p>Since your collaborator must be registered with COmanage before you can add them to your group, it's a good idea to check and see if they are registered or not!</p> <p>We suggest searching for your collaborator's email address using the global search. Click on the magnifying glass () in the top righthand side to open the search bar:</p> <p></p> <p>You can also go to main search page using this link.</p> <p>Then enter your collaborator's email address and click the \"SEARCH\" button (or hit the Enter key).</p> <ul> <li> <p>If there is no identity registered with the email, you'll see a mostly empty page with the text \"No results found\".      In this case, you will need to invite your collaborator to register with COmanage.</p> </li> <li> <p>If there is one identity registered with the email, you'll be automatically redirected to that identity's \"CO Person\" page.     You can now add the collaborator to your COmanage group using this email, following the instructions below.</p> </li> <li> <p>If there are multiple identities registered with the email, you'll see a list of the identities registered with that email address.     You will need to choose one of the identities to add to your COmanage group.</p> </li> </ul> Multiple identities <p>Ideally, the COmanage registry is intended to have one identity registered per person.  In practice, however, there can be several reasons why someone has multiple identities registered. </p> <p>It is possible to consolidate identities into one to help avoid confusion. Reach out to support@osg-htc.org for assistance.</p>"},{"location":"collaborators/#invite-collaborators-to-join-comanage","title":"Invite collaborators to join COmanage","text":"<p>If you can't find your collaborator's identity using the COmanage search, you likely need to invite them to register with COmanage.</p> <p>To do so, send your collaborator an email like the following:</p> <p>Dear colleague,</p> <p>In order for me to give you access to my OSDF namespace, I will need you to register using this link: LINK_TBD .</p> <p>When asked to login, select your institution from the list of identity providers and you will be redirected to login via your institution.</p> <p>other_tasks_TBD</p> <p>Let me know once this task is complete and I will give you access to my OSDF namespace.</p> <p>For help, see the guide here: https://osdf-docs.osg-htc.org/register-with-comanage. Or contact support@osg-htc.org for more assistance.</p> <p>Regards,</p> <p>After they have registered, confirm that you can find them in COmanage. Then you can proceed to add them to your COmanage group.</p>"},{"location":"collaborators/#add-collaborators-to-your-comanage-group","title":"Add collaborators to your COmanage group","text":"<p>Your collaborator must be registered with COmanage before you can add them to your group! If they are not, follow these instructions to invite them.</p> <p>Once you've determined your collaborator's identity in COmanage, you can add them to your group.</p> <ol> <li>Go to the group membership page that you want to add your collaborator to.</li> <li>In the text box after \"Add member:\", type the email address or other identifier of your collaborator.</li> <li>The search box will update with a list of matching members; ideally there is only one identity in the list.</li> <li>Click the identity corresponding to your collaborator. The name of that identity will appear in bold where the search box was previously.</li> <li>Click the \"Add\" button to add the identity to the group.</li> </ol> <p>The group member list will update and you will see the collaborator listed as a \"member\" of the group. You can further modify their membership as described next.</p>"},{"location":"collaborators/#manage-members-of-your-comanage-group","title":"Manage members of your COmanage group","text":"<p>From the group membership page, you can manage the members of your group and the nature of their membership.</p> <p>For each member of the group, the row in the table has a pair of checkboxes that show whether the identity is considered a \"member\" and an \"owner\".  You can check/uncheck these boxes as desired:</p> <ul> <li>New members that you add will automatically have the \"member\" box checked.</li> <li>Check the \"owner\" box to give the member the ability to add other collaborators to this group.</li> <li>If the both the \"member\" and \"owner\" box are unchecked, the member will be removed from the group.</li> </ul> <p>The changes to the checkboxes will only be saved when you hit the \"SAVE\" button at the bottom of the table.</p> <p>You can also control when the membership is valid.  That is, you can set an expiration date. To do so, </p> <ol> <li>Click the \"Edit\" button in the right-most column for the user you want to edit.</li> <li>Click the entry box for \"Valid From\" to bring up a calendar prompt; the date you choose will be the start date of the membership.     (If you want the membership to start immediately, you can leave this box blank.)</li> <li>Click the entry box for \"Valid Through\" to bring up a calendar prompt; the date you choose will be the last day the membership is valid.</li> <li>Click the \"SAVE\" button once you are satisfied with the changes. To discard your changes, navigate away from this page.</li> </ol>"},{"location":"concepts/","title":"OSDF Concepts","text":"<p>Abstract</p> <p>In this guide, you'll learn about the concepts of</p> <ul> <li>namespaces, including access policies</li> <li>caching and immutability</li> </ul>"},{"location":"concepts/#about-namespaces","title":"About namespaces","text":"<p>Data available via the OSDF is organized by \"namespace\". A namespace represents a set of data connected to the OSDF.</p>"},{"location":"concepts/#who-owns-a-namespace","title":"Who owns a namespace?","text":"<p>Each namespace has its own set of policies controlling who can access the connected data and how it can be accessed. The namespace and its policies are centrally registered when the data storage is connected to the OSDF. Furthermore, these policies apply to any connected data that share the same prefix as the namespace.</p> <p>For example, the namespace <code>osdf:///pelicanplatform</code> is registered by the Pelican Platform.  They therefore control the objects and nested namespaces listed under that prefix. A third party cannot register <code>osdf:///pelicanplatform/alternate</code>, since it contains the prefix owned by Pelican Platform.</p> What about data ownership? <p>The OSDF and other federations using the Pelican Platform are merely distribution systems: the data provider maintains ownership of their data under the data federation model. If the data provider limits access to their data to certain users, every component of the federation will respect those limitations.</p> <p>Connecting data to the OSDF</p> <p>If you have a dataset you want to make available via the OSDF, please reach out! </p> <ul> <li>You can request a consultation.</li> <li>You can email us at support@osg-htc.org.</li> </ul> <p>For more information on the OSDF, see this overview page.</p>"},{"location":"concepts/#who-can-access-a-namespace","title":"Who can access a namespace?","text":"<p>Each namespace can be configured with different access policies:</p> <ul> <li>Public Read - anyone can download the data from this namespace</li> <li>Read - only authenticated users can download the data from this namespace</li> <li>Write - only authenticated users can upload data to this namespace</li> </ul> <p>The entity that registered the namespace has control over how users authenticate access. For the most part, namespaces in the OSDF use COmanage (for managing access) and CILogon (for authenticating access).</p> <p>What's in a name?</p> <p>Typically, the name used for the namespace suggests something about the provenance and accessibility of the data. For more information, see the Pelican guide on Choosing Namespaces.</p> <p>If you are the manager of a namespace that was set up in coordination with the OSDF team, you can control access to your namespace following the instructions in the Collaborator access guide.</p>"},{"location":"concepts/#caching-and-immutability","title":"Caching and immutability","text":"<p>One of the main advantages of using the OSDF is the extensive system of caches geographically distributed across North America and beyond. Currently, in order for this system to work, the objects downloaded from the OSDF are assumed to be immutable.</p>"},{"location":"concepts/#what-is-a-cache","title":"What is a \"cache\"?","text":"<p>When data is downloaded from the OSDF, it typically passes through a \"cache\" before reaching its final destination. The cache keeps a copy of that data after the download is completed.  That way, the next time someone tries to download the same data, the cache can provide its copy instead of going all the way back to the original storage system.</p>"},{"location":"concepts/#why-does-the-osdf-use-caches","title":"Why does the OSDF use caches?","text":"<p>The OSDF was originally designed to support high throughput computing (HTC) workloads. An HTC workload could be anywhere from 10 to 1,000,000+ jobs, and typically there is some files common across all jobs. If those common files are large, an HTC workload can easily overwhelm the local network where the files are originally stored.</p> <p>By using caches, the OSDF can store copies of large files in servers much closer to where the HTC jobs are actually running.  These servers are located on internet backbones to ensure high bandwidth. When an HTC workload is deployed, the first few downloads of the large file will populate the network of caches. Subsequent downloads can then fetch the large file from a cache instead of the original data storage.</p>"},{"location":"concepts/#why-is-immutability-important","title":"Why is \"immutability\" important?","text":"<p>For this caching system to work, the OSDF assumes that the objects that are downloaded are \"immutable\" - that is, they do not change. That is because when you download an object multiple times from the OSDF, you are typically downloading a copy from one of the caches.</p> <p>If the object changes at the original data storage, then the copy stored at the cache no longer matches the object at the original data storage. Now when you try to download the object, you may get the old version or the new version. This inconsistency currently cannot be accounted for in the OSDF system and can cause problems in your work.</p> <p>Frankenstein's objects</p> <p>Because of some technical details with the Pelican software, if the object at the origin changes, then a client downloading the object may receive:</p> <ul> <li>the older version of the object,</li> <li>the new version of the object, or</li> <li>some combination of the old object and the new object!</li> </ul>"},{"location":"concepts/#help-i-changed-the-object-what-do-i-do","title":"Help, I changed the object! What do I do?","text":"<p>If you have to change the object at the origin, we recommend that you change the name of the object as well. That way, its OSDF address will differ from any copies that are stored in a cache.</p> <p>If you can't change the name of the object, then we recommend that you wait a couple of days before trying to download the object again. The copies kept by the caches will be cleaned out in order to make room for other objects that are being downloaded. (There currently isn't a mechanism within Pelican to \"purge\" caches of old copies of objects.)</p> <p>If you need help, contact the OSDF team at support@osg-htc.org.</p> <p>Immutability and the future of Pelican</p> <p>A long term goal in the development of the Pelican software is to address this assumption of immutability. Eventually, objects in a Pelican data federation will have the concept of versioning, enabling caches to check if the copy they are storing is the most recent version.</p>"},{"location":"concepts/#what-about-removing-objects","title":"What about removing objects?","text":"<p>In principle, you can remove an object from the original data storage. Any copies on the caches, however, will persist, at least until the cache needs to make room for more recent objects.</p> <p>If you need to remove objects from your origin, we recommend contacting the OSDF team for assistance at support@osg-htc.org.</p>"},{"location":"download-data/","title":"Download data using the OSDF","text":"<p>Abstract</p> <p>In this guide, you'll learn </p> <ul> <li>how to download an object using the OSDF</li> <li>how to authenticate your access</li> </ul> <p>The exercises in this guide assume that you have installed the Pelican CLI client on your device.  If you have not, see the Set up Pelican guide for instructions.</p>"},{"location":"download-data/#whats-your-namespace","title":"What's your namespace?","text":"<p>For the exercises below, you need to have \"read\" access to an OSDF namespace connected to CILogon. Whoever directed you to this guide should have provided the necessary information.</p> <p>If you were not directed to this guide, then the exercises almost certainly will not work. You're welcome to read on, though!</p>"},{"location":"download-data/#command-syntax","title":"Command syntax","text":"<p>To download data, use the <code>pelican object get</code> command.  The syntax is</p> <pre><code>pelican object get &lt;osdf_path&gt; &lt;local_object&gt;\n</code></pre> <p>where <code>&lt;osdf_path&gt;</code> is the OSDF address to the object that you want to download and where <code>&lt;local_object&gt;</code> is the name or path to a file on your device.</p> <p>There are two scenarios that can occur when you run a <code>pelican object get</code> command: </p> <ul> <li>If the object is public, then the download should proceed immediately!</li> <li>If the object is private, then you will need to authenticate the download.</li> </ul> <p>For an example of downloading a public file, see the Set up Pelican guide.</p> Don't forget the local destination <p>If you forget to include the local destination at the end of the command, you'll get an error.  For example: </p> <pre><code>$ pelican object get osdf:///pelicanplatform/test/hello-world.txt\nERROR[2025-10-06T14:15:35-05:00] No Source or Destination\nTry 'pelican object get --help' for more information.\n</code></pre> <p>To fix this, append <code>./</code> (or some other local path) to the end of the command.</p>"},{"location":"download-data/#setup-test-download","title":"Setup test download","text":"<p>First, you need to identify the OSDF address for an object in your private OSDF namespace to download.</p> <ul> <li>We recommend that owners of a private OSDF namespace provide such an address to their users.</li> <li>If you are the owner of the private OSDF namespace, then you should be able to follow the instructions in the Upload data guide to create a test object at an address of your choosing.</li> </ul> <p>Typically the OSDF address for testing downloads is in the form of <code>osdf:///YOUR_NAMESPACE/test/some_object_name</code>. </p> <p>Finding an object to download</p> <p>If you don't know the address of an object to download, you can try finding one using the <code>pelican object ls</code> command:</p> <pre><code>pelican object ls osdf:///YOUR_NAMESPACE\n</code></pre> <p>Running this command should list the available objects or addresses available under your namespace. Then choose an object to download, or use additional <code>pelican object ls</code> commands to look deeper into the namespace. </p> <p>You may need to authenticate the listing command. Follow the instructions below on how to authenticate.</p>"},{"location":"download-data/#test-download","title":"Test download","text":"<p>Once you've identified the OSDF address for an object to test the download, run the command</p> <pre><code>pelican object get osdf:///YOUR_NAMESPACE/test/some_object_name ./\n</code></pre> <p>where, of course, you should substitute the OSDF address for the object you are actually downloading.</p> Error for bad namespace <p>If you forget to change the command before running it, you'll get an error like this:</p> <pre><code>ERROR[2025-10-06T14:22:58-05:00] error while querying the director at https://osdf-director.osg-htc.org: 404: No sources found for the requested path: no origins found for the requested namespace '/YOUR_NAMESPACE/test/some_object_name': Request ID: a57727b2-a344-4de6-8028-dd1e6186e5de\nERROR[2025-10-06T14:22:58-05:00] Failure getting osdf:///YOUR_NAMESPACE/test/some_object_name: failed to get namespace information for remote URL osdf:///YOUR_NAMESPACE/test/some_object_name: error while querying the director at https://osdf-director.osg-htc.org: 404: No sources found for the requested path: no origins found for the requested namespace '/YOUR_NAMESPACE/test/some_object_name': Request ID: a57727b2-a344-4de6-8028-dd1e6186e5de\n</code></pre>"},{"location":"download-data/#authenticate-download","title":"Authenticate download","text":"<p>The first time you run a <code>pelican</code> command that requires authentication, you will see this message:</p> <pre><code>The client is able to save the authorization in a local file.\nThis prevents the need to reinitialize the authorization for each transfer.\nYou will be asked for this password whenever a new session is started.\nPlease provide a new password to encrypt the local OSDF client configuration file:\n</code></pre> <p>Choose a password that you feel is secure and easy to remember. The password is used only to unlock the configuration file on your device and will not be transmitted.</p> <p>Once you've entered your desired password, you'll see something like this:</p> <pre><code>To approve credentials for this operation, please navigate to the following URL and approve the request:\n\nhttps://&lt;issuer_URL_for_your_namespace&gt;/scitokens-server/device?user_code=&lt;some_unique_code&gt;\n</code></pre> <p>Open the URL in any web browser, even one that is not connected to the device that you are using. You'll be directed to a CILogon webpage and prompted to login.</p> <p></p> <p>Make sure to select the appropriate identity provider for accessing your namespace. Typically, this is the same identity provider you used when you registered in COManage.</p> <p>Click the \"Log On\" button.</p> <p>Tip</p> <p>We recommend that you do not click the \"Remember this selection\" box until after you've done several successful authentications. It can be tricky to \"undo\" this box, so it is best to make sure everything is working first!</p> <p>You'll be re-directed to login with the selected identity provider. For some institutions, the identity provider may recognize your browser session and automatically log you in.</p> <p>Once you've successfully logged in to your identity provider, you will be redirected to a page like this:</p> <p></p> <p>Now, return to your terminal. You will be asked for the password to your local configuration file. Enter the same password you used earlier.</p> <pre><code>The OSDF client configuration is encrypted.  Enter your password for the local OSDF client configuration file:\n</code></pre> What if I use the wrong password? <p>If you enter the wrong password for your local client configuration file, you'll get an error like <code>Failed to get reset password: pkcs8: incorrect password</code> and the <code>pelican</code> command will fail.</p> <p>Rerun the last <code>pelican</code> command again to retry.</p> <ul> <li>If you want to change the current password, run the command <code>pelican credentials reset-password</code>.</li> <li>If you don't remember your password and need to reset it, email support@osg-htc.org   to request instructions.</li> </ul> <p>Once you've reached this point, the data transfer itself will be pretty quick if you are using the example file above. For larger files, you may see a progress bar.</p> <p>If no errors are reported, then the download command was successful.</p> In case of errors <p>If there is an error message, the message should explain what the problem is. Most common is that you (or more accurately, the identity you authenticated with) do not have the permission to download objects from that namespace. </p> <ul> <li>Double check that the OSDF address you are using is correct</li> <li>Confirm that you are using the correct identity for the download</li> </ul> <p>If you are still having issues, email support@osg-htc.org.</p>"},{"location":"download-data/#confirm-download","title":"Confirm download","text":"<p>Once the download command has finished, the object should be available at the location you provided.  You should verify that the contents of the object on your local device matches what you expect to find.</p>"},{"location":"download-data/#future-downloads","title":"Future downloads","text":"<p>The credential that Pelican generated on the first download will be kept in your local client configuration. These credentials typically have a lifetime of about 15 minutes, though your namespace may be configured differently.</p> <p>If you try to <code>get</code> another object from your namespace while you have an active credential, you will not need to repeat the CILogon authentication. You may or may not be required to enter the password for your local client configuration, depending on how your device is set up.</p> <p>If the local credential has expired, then you will have to repeat the CILogon authentication the next time you try to <code>get</code>.</p>"},{"location":"download-data/#caching","title":"Caching","text":"<p>When you download an object via the OSDF, it is first downloaded to a \"cache\" before transferring to your computer.  A copy remains on the cache so that the next time you (or someone else) downloads the object, the cache can provide it instead of the origin.</p> <p>This setup is useful when the data needs to be downloaded repeatedly. Instead of repeatedly downloading data from the original data storage, clients can download the data from the caches.</p> <p>For more information about caching in the OSDF and its implications, see this section in the Concepts guide.</p>"},{"location":"pelican-client/","title":"Set up Pelican","text":"<p>Abstract</p> <p>The Pelican Platform is the software that powers the OSDF.  In this guide, you'll learn:</p> <ul> <li>how to install the Pelican client</li> <li>basics of using the Pelican client</li> </ul>"},{"location":"pelican-client/#install-the-pelican-client","title":"Install the Pelican client","text":"<p>We recommend that you use the Pelican CLI (command line interface) client for most purposes. To install the Pelican CLI, follow the instructions for your operating system:</p> <ul> <li>Install Pelican CLI on Linux </li> <li>Install Pelican CLI on macOS </li> <li>Install Pelican CLI on Windows </li> </ul> <p>For additional ways to install the Pelican CLI client, see the Pelican documentation.</p> Other Pelican clients <p>There are other Pelican clients for interacting with Pelican federations such as the OSDF. For more information, see the Pelican client documentation. </p> <p>For the purposes of this website, we assume that you are using the Pelican CLI client!</p>"},{"location":"pelican-client/#confirm-installation","title":"Confirm installation","text":"<p>Let's confirm you have Pelican installed by running the following command:</p> <pre><code>pelican --version\n</code></pre> <p>This command should work regardless of your operating system and will display the version number, as well as some information about the software build.</p> <p>For example,</p> <pre><code>$ pelican --version\nVersion: 7.19.2\nBuild Date: 2025-09-11T16:10:33Z\nBuild Commit: 298fba8f7a7801adc35b4a3620d117ad38bb436a\nBuilt By: goreleaser\n</code></pre>"},{"location":"pelican-client/#test-download","title":"Test download","text":"<p>Next, you should test that you can download a public object from the OSDF. Run the following command:</p> <pre><code>pelican object get osdf:///pelicanplatform/test/hello-world.txt ./\n</code></pre> <p>You may or may not see a progress bar as part of the download - it depends on how quickly the object can be downloaded. For example:</p> <pre><code>$ pelican object get osdf:///pelicanplatform/test/hello-world.txt ./\nhello-world.txt 27.00b / 27.00b [=======================================] Done!\n</code></pre> <p>If successful, you should see a new file in your directory called <code>hello-world.txt</code>, with the following contents:</p> <pre><code>If you are seeing this message, getting an object from OSDF was successful.\n</code></pre>"},{"location":"pelican-client/#pelican-client-basics","title":"Pelican client basics","text":"<p>Understanding the test command you ran above is a good introduction to how Pelican works.</p>"},{"location":"pelican-client/#commands","title":"Commands","text":"<p>Most users will only ever use the <code>pelican object</code> set of commands. To see all the available commands, run this:</p> <pre><code>pelican object --help\n</code></pre> Other <code>pelican</code> commands <p>You can see the other available sets of commands with</p> <pre><code>pelican --help\n</code></pre> <p>We recommend you avoid using these other commands unless you are specifically told to use one.  These other sets of commands are generally used by the admins running a Pelican federation.</p> <p>If you are interested in learning more about these commands, we recommend reading the Pelican docs.</p> <p>The most common commands you'll use are</p> Command Description <code>pelican object ls</code> list an object or namespace within a federation <code>pelican object get</code> download an object from a federation <code>pelican object put</code> upload an object to a federation"},{"location":"pelican-client/#the-pelican-url","title":"The Pelican URL","text":"<p>You usually need to provide a \"Pelican URL\" that specifies the address of the object or namespace that you are interacting with.  For objects in the OSDF, this URL has the following format:</p> <pre><code>osdf:///&lt;namespace&gt;/&lt;object_name&gt;\n</code></pre> <ul> <li>The <code>osdf://</code> prefix tells Pelican to use the OSDF.</li> <li>The <code>/&lt;namespace&gt;/</code> part tells Pelican where to find the desired dataset(s).</li> <li>The <code>&lt;object_name&gt;</code> part tells Pelican the specific object to find.</li> </ul> <p>If you are managing the data in a namespace, understanding the distinction between the namespace part and the object part is important. But otherwise, most end users won't need to know the difference. </p>"},{"location":"pelican-client/#altogether-now","title":"Altogether now","text":"<p>You now have all the pieces to understand the test command that you ran earlier:</p> <pre><code>pelican object get osdf:///pelicanplatform/test/hello-world.txt ./\n</code></pre> <ul> <li><code>pelican object get</code> is used to download an object from a Pelican federation</li> <li><code>osdf://</code> tells Pelican to use the OSDF</li> <li><code>/pelicanplatform/</code> tells Pelican to look in the <code>pelicanplatform</code> namespace</li> <li><code>test/hello-world.txt</code> tells Pelican to look for the object named <code>test/hello-world.txt</code></li> <li><code>./</code> tells Pelican to download the object to the current directory</li> </ul> What's in an (object's) name? <p>You may have noticed in the explanation that Pelican sees the object name as <code>test/hello-world.txt</code> but when you downloaded the object, the file was saved as <code>hello-world.txt</code>!</p> <p>While Pelican uses the bucket-object paradigm (like S3), it knows when and how to translate into the traditional directory-file paradigm when appropriate. In fact, at the Pelican origin serving the <code>pelicanplatform</code> namespace, the <code>test/hello-world.txt</code> object almost  certainly maps to a file <code>hello-world.txt</code> inside of a directory <code>test</code> in the connected data storage.</p>"},{"location":"sync-dataset/","title":"Sync your dataset using OSDF","text":"<p>Abstract</p> <p>In this guide, you'll learn</p> <ul> <li>how to upload your dataset to the OSDF</li> <li>how to download your dataset from the OSDF</li> </ul> <p>This guide assumes that you have installed the Pelican CLI client on your device. If you have not, see the Set up Pelican guide for instructions.</p> <p>Furthermore, this guide assumes that you have completed one or both of the Upload data guide and the Download data guide.</p>"},{"location":"sync-dataset/#the-sync-command","title":"The sync command","text":"<p>The Pelican client provides the command <code>pelican object sync</code> for handling the transfers of many objects. The syntax for the command is:</p> <pre><code>pelican object sync &lt;source&gt; &lt;destination&gt;\n</code></pre> <p>where one of <code>&lt;source&gt;</code> and <code>&lt;destination&gt;</code> is a directory on your local device and the other is the OSDF address you want to sync against. These references can be individual objects, but the command is best suited for many objects.</p> <p>The sync command will act recursively.  If uploading a local directory that in turn contains additional directories with files, the whole directory tree will be reproduced under the OSDF address you specified. If downloading objects from an OSDF address, the client will download all objects that share the same OSDF address as their prefix.</p> <p>If the transfer is interrupted, you can rerun the same <code>pelican object sync</code> command and it will skip objects that were already successfully transferred.</p>"},{"location":"sync-dataset/#using-the-sync-command-to-upload-data","title":"Using the sync command to upload data","text":"<p>If the destination for the <code>pelican object sync</code> command is an OSDF address, then the client will upload the contents of the local directory you provided to the corresponding object store.</p> <pre><code>pelican object sync LOCAL_DIRECTORY osdf:///YOUR_NAMESPACE/some_location\n</code></pre> <p>Warning</p> <p>The emphasis on \"contents\" is because the name of the local directory will not be automatically included in the OSDF address for the objects you upload. In this example, that means the OSDF address you choose will not automatically include the name of <code>LOCAL_DIRECTORY</code> in the prefix.</p> <p>If you want that name to be included in the prefix, then you need to include it in the OSDF address you specify!</p> <p>Like with uploading a single object, you will need to authenticate your identity to provide the necessary authorization. Once authorized, the client will recursively upload the contents of the local directory.</p> <p>The sync command will not overwrite existing objects on upload!</p> <p>Bug</p> <p>Currently there is a bug where uploading a directory with object names that already exist at the OSDF address will return a <code>403 forbidden</code> error. The client will still attempt to upload any of the new objects it found in the local directory, but even if that is successful the command will overall return the <code>403 forbidden</code> error.</p> <p>For updates, see the bug report.</p>"},{"location":"sync-dataset/#setup-test-upload-sync","title":"Setup test upload sync","text":"<p>On your local device, create the following directory tree:</p> <pre><code>sync-test.01/\n\u251c\u2500\u2500 nested/\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nested.txt\n\u2514\u2500\u2500 test.txt\n</code></pre> <p>You can recreate this structure by copying and running the following commands (Linux/Mac):</p> <pre><code>mkdir -p sync-test.01/nested\necho \"First file in the sync test\" &gt; sync-test.01/test.txt\necho \"Second file (nested) in the sync test\" &gt; sync-test.01/nested/nested.txt\n</code></pre> <p>If using Windows PowerShell, use the File Explorer to create the directories and Notepad or other text editor to create the files.</p> Why is there a number in the names? <p>A major assumption of the OSDF (and the Pelican software that backs it) is that the objects it makes accessible are immutable, that is, they do not change.</p> <p>Here, the number is provided as a way to version the name of the objects. </p> <p>To repeat this exercise (after the <code>sync-test.01</code> files have been uploaded), you can just increment the number to try again.</p> <p>For more information, see the section on Caching and immutability.</p> <p>Next, identify the OSDF address that you want to make the contents of the local directory available at.  We recommend using <code>osdf:///YOUR_NAMESPACE/test/sync-test.01</code>.</p>"},{"location":"sync-dataset/#test-upload-sync","title":"Test upload sync","text":"<p>Make sure that your terminal is in the directory that contains the <code>sync-test.01</code> folder. Then run</p> <pre><code>pelican object sync sync-test.01 osdf:///YOUR_NAMESPACE/test/sync-test.01\n</code></pre> <p>Remember that the <code>sync</code> command will upload the contents of the local directory - if you want to have the local directory name <code>sync-test.01</code> in the final OSDF address, then you need to include it in the OSDF address you are uploading to.</p> <p>You will be prompted to authenticate, just like you did in the Upload data test. Once you've secured the necessary authorization, the upload should be brief.</p> In case of errors <p>If the upload of one of the objects encounters an error, the corresponding error message should be printed and in most cases the client will continue with uploading the other remaining objects.</p> <p>If you try the sync command again, it should skip the objects that were successfully uploaded.</p> <p>For assistance in troubleshooting an error, consider reaching out to support@osg-htc.org.</p>"},{"location":"sync-dataset/#confirm-uploads","title":"Confirm uploads","text":"<p>To confirm that the upload was successful, check that the objects can now be listed.</p> <p>First, run this command to check the available objects under the OSDF address you provided for the sync command:</p> <pre><code>pelican object ls -l osdf:///YOUR_NAMESPACE/test/sync-test.01\n</code></pre> <p>You should see two new items in this listing: <code>test.txt</code> and <code>nested</code>. If there are no other objects under your <code>test</code> prefix, the output would look like this:</p> <pre><code>/YOUR_NAMESPACE/test/sync-test.01/nested      0   2025-10-10 21:10:32\n/YOUR_NAMESPACE/test/sync-test.01/test.txt   28   2025-10-10 21:10:32\n</code></pre> <p>The entry for <code>nested</code> lists 0 bytes (middle column), which is an indication that this is not an object but rather an extension of the OSDF address. Take a look at the objects available under the nested address with </p> <pre><code>pelican object ls -l osdf:///YOUR_NAMESPACE/test/sync-test.01/nested\n</code></pre> <p>This time, you should only see one entry listed corresponding to <code>nested.txt</code>:</p> <pre><code>/YOUR_NAMESPACE/test/sync-test.01/nested/nested.txt   34   2025-10-10 21:10:32\n</code></pre> <p>Tip</p> <p>To further confirm that your data was successfully synced to the remote object store in the OSDF, follow the instructions in the next section to download the objects and inspect their contents.</p>"},{"location":"sync-dataset/#using-the-sync-command-to-download-data","title":"Using the sync command to download data","text":"<p>If the source is an OSDF address, then the client will download all objects that share the same OSDF prefix as the address to the local destination that you specified. This will reproduce directories in the local file system that corresponds to the nesting of the object addresses.</p> <pre><code>pelican object sync osdf:///YOUR_NAMESPACE/some_prefix NEW_LOCAL_DIRECTORY\n</code></pre> <p>Careful!</p> <p>The sync command will overwrite any local objects that have the same name but different contents when downloading!</p> <p>Local objects with different names will be unaffected, even if inside of a sub-directory created by the sync command.</p> <p>Like with downloading a single object, the OSDF address you are trying to access may require that you authenticate your identity to provide the necessary authorization for downloading the data.</p>"},{"location":"sync-dataset/#setup-test-download-sync","title":"Setup test download sync","text":"<p>On your local device, create a new empty directory and move into it:</p> <pre><code>mkdir sync-download-test\ncd sync-download-test\n</code></pre> <p>The instructions below assume that the namespace has the addresses created in the section above: <code>osdf:///YOUR_NAMESPACE/test/sync-test.01</code>.</p> <p>If your namespace does not have this address, then </p> <ul> <li> <p>If you have upload permissions, we recommend that you first complete the exercises above!</p> </li> <li> <p>If you do not have upload permissions, we recommend that you first finish reading this guide.   Then try to apply your understanding to a \"small\" sync of data from your namespace.</p> </li> </ul>"},{"location":"sync-dataset/#test-download-sync","title":"Test download sync","text":"<p>Inside the empty directory, run the following command: </p> <pre><code>pelican object sync osdf:///YOUR_NAMESPACE/test/sync-test.01 ./\n</code></pre> <p>You may be prompted to authenticate, just like you did in the Download data test. The download itself should be brief.</p> In case of errors <p>If the download of one of the objects encounters an error, the corresponding error message should be printed and in most cases the client will continue with download the other remaining objects.</p> <p>If you try the sync command again, it should skip the objects that were successfully downloaded.</p> <p>For assistance in troubleshooting an error, consider reaching out to support@osg-htc.org.</p>"},{"location":"sync-dataset/#confirm-downloads","title":"Confirm downloads","text":"<p>After the <code>sync</code> command finishes, list the contents of your current directory with</p> <pre><code>ls\n</code></pre> <p>You should see the file <code>test.txt</code> and a directory <code>nested</code>.  Again, this is because the <code>sync</code> command transfers the contents of the address you specified.</p> Creating <code>sync-test.01</code> <p>If you want the sync command to put the contents into a new local directory <code>sync-test.01</code>, then you can use this command instead:</p> <pre><code>pelican object sync osdf:///YOUR_NAMESPACE/test/sync-test.01 ./sync-test.01\n</code></pre> <p>Using your terminal or your device's file explore, confirm that the <code>sync</code> command created the following structure, files, and contents:</p> <pre><code>./\n\u251c\u2500\u2500 nested/\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nested.txt   # Contains \"First file in the sync test\"\n\u2514\u2500\u2500 test.txt         # Contains \"Second file (nested) in the sync test\"\n</code></pre> Overwriting local objects <p>As warned above, the sync command will overwrite any local objects with the same name/path as the object you are downloading. To see this in action, try the following:</p> <ol> <li>Edit the contents of <code>sync-download-test/test.txt</code>  using your terminal or device's text editor.</li> <li>Create or copy files to <code>sync-download-test/test2.txt</code> and <code>sync-download-test/nested/nested2.txt</code>.</li> <li>In the parent <code>sync-download-test</code> directory, rerun the same <code>pelican object sync</code> command that you did in Test download sync.</li> </ol> <p>Now check the results:</p> <ul> <li>Did your changes to <code>test.txt</code> persist?</li> <li>Were your new files <code>test2.txt</code> and <code>nested2.txt</code> affected?</li> </ul>"},{"location":"upload-data/","title":"Upload data using the OSDF","text":"<p>Abstract</p> <p>In this guide, you'll learn </p> <ul> <li>the basics of uploading data via the OSDF</li> <li>how to authenticate your access</li> <li>how to confirm the upload was successful</li> </ul> <p>The exercises in this guide assume that you have installed the Pelican CLI client on your device.  If you have not, see the Set up Pelican guide for instructions.</p>"},{"location":"upload-data/#whats-your-namespace","title":"What's your namespace?","text":"<p>For the exercises below, you need to have \"write\" access to an OSDF namespace connected to CILogon. Whoever directed you to this guide should have provided the necessary information.</p> <p>If you were not directed to this guide, then the exercises almost certainly will not work. You're welcome to read on, though!</p>"},{"location":"upload-data/#command-syntax","title":"Command syntax","text":"<p>To upload data, use the <code>pelican object put</code> command. The syntax is</p> <pre><code>pelican object put &lt;local_object&gt; &lt;osdf_path&gt;\n</code></pre> <p>where <code>&lt;local_object&gt;</code> is the name or path to a file on your device, and <code>&lt;osdf_path&gt;</code> is the location in the OSDF that you want others to use to download your data.</p> <p>For example, the following command would upload the contents of <code>test.txt</code> and make it available under the address of <code>osdf:///pelicanplatform/test/test.txt</code>:</p> <pre><code>pelican object put test.txt osdf:///pelicanplatform/test/test.txt\n</code></pre> <p>To run this command, you must verify with the OSDF that your identity has permission to add data to the specified namespace. See About namespaces to learn more about permissions.</p>"},{"location":"upload-data/#setup-test-upload","title":"Setup test upload","text":"<p>First, create a file to upload as a test.</p> <ul> <li> <p>Using a Linux or Mac terminal, run</p> <pre><code>echo \"Testing upload to the OSDF\" &gt; upload-test.txt\n</code></pre> </li> <li> <p>Using a Windows Powershell terminal, run</p> <pre><code>notepad.exe upload-test.txt\n</code></pre> <p>to launch the text editor. Add the desired contents, save, then close.</p> </li> </ul> <p>Next, decide where in your OSDF namespace you want to make the file available.</p> <ul> <li>use a <code>test/</code> prefix within your namespace</li> <li>use some form of versioning in the object name</li> </ul> <p>For example:</p> <pre><code>osdf:///YOUR_NAMESPACE/test/upload-test.01.txt\n</code></pre> Why use versioning in the name? <p>This is largely due to the caching system used by the OSDF - the system assumes that the object in the cache is the same as the object in the origin for a given address. </p> <p>If you upload a different object to the same OSDF address, a client that tries to download the object could receive</p> <ul> <li>the old version from a cache</li> <li>the new version from the origin</li> <li>some combination inbetween (!)</li> </ul> <p>For more information, see Caching and immutability.</p> <p>Warning</p> <p>Before you start uploading your actual data, you should</p> <ol> <li>Finish this guide (!)</li> <li>Read the Sync your dataset guide </li> </ol>"},{"location":"upload-data/#test-upload","title":"Test upload","text":"<p>Now that you are ready, run the following command:</p> <pre><code>pelican object put upload-test.txt osdf:///YOUR_NAMESPACE/test/upload-test.01.txt\n</code></pre> <p>Warning</p> <p>Make sure you change <code>YOUR_NAMESPACE</code> to your namespace!</p> <p>Otherwise, you'll get an error like this:</p> <pre><code>ERROR[2025-09-24T16:28:56-05:00] error while querying the director at\n https://osdf-director.osg-htc.org: 404: No sources found for the requested path:\n no origins found for the requested namespace '/YOUR_NAMESPACE/test/upload-test.01.txt':\n Request ID: 7f9e370a-98a0-41db-801b-5c3fd42791d1\n</code></pre>"},{"location":"upload-data/#authenticate-upload","title":"Authenticate upload","text":"<p>The first time you run a <code>pelican</code> command that requires authentication, you will see this message:</p> <pre><code>The client is able to save the authorization in a local file.\nThis prevents the need to reinitialize the authorization for each transfer.\nYou will be asked for this password whenever a new session is started.\nPlease provide a new password to encrypt the local OSDF client configuration file:\n</code></pre> <p>Choose a password that you feel is secure and easy to remember. The password is used only to unlock the configuration file on your device and will not be transmitted.</p> <p>Once you've entered your desired password, you'll see something like this:</p> <pre><code>To approve credentials for this operation, please navigate to the following URL and approve the request:\n\nhttps://&lt;issuer_URL_for_your_namespace&gt;/scitokens-server/device?user_code=&lt;some_unique_code&gt;\n</code></pre> <p>Open the URL in any web browser, even one that is not connected to the device that you are using. You'll be directed to a CILogon webpage and prompted to login.</p> <p></p> <p>Make sure to select the appropriate identity provider for accessing your namespace. Typically, this is the same identity provider you used when you registered in COManage.</p> <p>Click the \"Log On\" button.</p> <p>Tip</p> <p>We recommend that you do not click the \"Remember this selection\" box until after you've done several successful authentications. It can be tricky to \"undo\" this box, so it is best to make sure everything is working first!</p> <p>You'll be re-directed to login with the selected identity provider. For some institutions, the identity provider may recognize your browser session and automatically log you in.</p> <p>Once you've successfully logged in to your identity provider, you will be redirected to a page like this:</p> <p></p> <p>Now, return to your terminal. You will be asked for the password to your local configuration file. Enter the same password you used earlier.</p> <pre><code>The OSDF client configuration is encrypted.  Enter your password for the local OSDF client configuration file:\n</code></pre> What if I use the wrong password? <p>If you enter the wrong password for your local client configuration file, you'll get an error like <code>Failed to get reset password: pkcs8: incorrect password</code> and the <code>pelican</code> command will fail.</p> <p>Rerun the last <code>pelican</code> command again to retry.</p> <ul> <li>If you want to change the current password, run the command <code>pelican credentials reset-password</code>.</li> <li>If you don't remember your password and need to reset it, email support@osg-htc.org   to request instructions.</li> </ul> <p>Once you've reached this point, the data transfer itself will be pretty quick if you are using the example file above. For larger files, you may see a progress bar.</p> <p>If no errors are reported, then the upload command was successful.</p> In case of errors <p>If there is an error message, the message should explain what the problem is. Most common is that you (or more accurately, the identity you authenticated with) do not have the permission to upload to that namespace. </p> <ul> <li>Double check that the OSDF address you are using is correct</li> <li>Confirm that you are using the correct identity for the upload</li> </ul> <p>If you are still having issues, email support@osg-htc.org.</p> <p>Error fetching checksum</p> <p>There is currently a bug where this message may be printed even if the upload was successful. Follow the instructions below to check whether your upload was successful or not.</p>"},{"location":"upload-data/#confirm-upload","title":"Confirm upload","text":"<p>There are a couple of ways that you can confirm the upload was successful.</p> <ol> <li> <p>If you have access to the data storage connect to the namespace,     you can use that to confirm the upload was successful.</p> </li> <li> <p>If your namespace has \"listings\" enabled, then you can confirm the upload by running this command:</p> <pre><code>pelican object ls osdf:///YOUR_NAMESPACE/test/upload-test.01.txt\n</code></pre> <p>Note that because \"listing\" is a separate capability from \"write\", you will have to repeat the authentication step with CILogon. This separation is necessary so that others can use the \"listing\" capability without being given \"write\" capability.</p> </li> <li> <p>Finally, you can use Pelican to download the object.     For instructions on how to do so, see the Download data guide .</p> </li> </ol>"},{"location":"upload-data/#future-uploads","title":"Future uploads","text":"<p>The credential that Pelican generated on the first upload will be kept in your local client configuration. These credentials typically have a lifetime of about 15 minutes, though your namespace may be configured differently.</p> <p>If you try to <code>put</code> another object to your namespace while you have an active credential, you will not need to repeat the CILogon authentication. You may or may not be required to enter the password for your local client configuration, depending on how your device is set up.</p> <p>If the local credential has expired, then you will have to repeat the CILogon authentication the next time you try to <code>put</code>.</p>"},{"location":"upload-data/#caching","title":"Caching","text":"<p>The OSDF uses an extensive system of caches to distribute the load of repeated downloads. In order for this system to work, the OSDF assumes objects are immutable.</p> <p>While you technically can overwrite an object on upload, the danger is that the object in the data storage no longer matches the object in the cache. This leads to \"undefined\" behavior in the OSDF system.</p> When there is a mismatch <p>If there is a mismatch between an object in the original data storage and in the cache, then when the client downloads the object it may receive:</p> <ul> <li>the old version of the object (from the cache)</li> <li>the new version of the object (from the origin)</li> <li>or a mix inbetween! (the cache began updating during the transfer)</li> </ul> <p>A long term goal for the underlying Pelican software is to address this issue.</p> <p>For more information on caching, see this section in the Concepts guide.</p>"}]}